# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  bootstrap:
    docker:
      # specify the version you desire here
      - image: circleci/node:8.9.4-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/redis:latest
    working_directory: ~/repo
    steps:
      - checkout
      - run: echo 127.0.0.1 www.zendesk.com | sudo tee -a /etc/hosts
      - run: sudo apt-get update
      - run: sudo apt-get install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
      - run: if [ "$CIRCLE_BRANCH" = "master"  ]; then sudo npm install -g grunt-cli; fi
      - run:
          shell: /bin/sh +eo pipefail
          command: |
            echo Running LOL
            node scripts/error.js && echo Hey
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
      - run: yarn install
      - run: case $CIRCLE_NODE_INDEX in 0) node scripts/generateTasks.js ;; esac
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - persist_to_workspace:
          root: .
          paths:
            - .circleci

  generateA:
    docker:
      - image: circleci/node:8.9.4
    working_directory: ~/repo
    parallelism: 3
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
      - attach_workspace:
          at: .
      - run: TESTFILES=$(circleci tests split .circleci/build.txt) && ${TESTFILES}
      # - run: TESTFILES=$(circleci tests split .circleci/build.txt) && ${TESTFILES}
      # - run: TESTFILES=$(circleci tests split "node scripts/create.js --target=a" "node scripts/create.js --target=b" "node scripts/create.js --target=c") && ${TESTFILES}
      - persist_to_workspace:
          root: .
          paths:
            - dist

  generateB:
    docker:
      - image: circleci/node:8.9.4
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
      - run: node scripts/create.js --target=b
      - persist_to_workspace:
          root: .
          paths:
            - dist

  test:
    docker:
      - image: circleci/node:8.9.4-browsers
    working_directory: ~/repo
    parallelism: 3
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
      - run: mkdir -p /tmp/test-results
      - run:
          name: Tests unit
          command: case $CIRCLE_NODE_INDEX in 0) TESTFILES=$(circleci tests glob "test/unit/**/*.js") && yarn run t ${TESTFILES} ;; esac
      - run:
          name: Tests acceptance
          command: TESTFILES=$(circleci tests glob "test/acceptance/**/*.js" | circleci tests split --split-by=timings) && yarn run t ${TESTFILES} --parallel
      - store_test_results:
          path: /tmp/test-results

  list:
    docker:
      - image: circleci/node:8.9.4
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
      - attach_workspace:
          at: .
      - run: node scripts/create.js

workflows:
  version: 2
  # TODO: - check if schduled build start before timer after a push
  #       - check if custom branches workflows can be triggered by
  #         duplicating hourly workflow without shedule
  #         but adding cutom branch name to filters
  #
  hourly-AM:
    triggers:
      - schedule:
          # LA working hours: 8.59-11.59 weekdays
          # cron: "59 15-18 * * 1-5"
          # UTC time
          cron: "59 7-10 * * 1-5"
          filters:
            branches:
              only:
                - master
    jobs:
      - bootstrap
      - generateA:
          requires:
            - bootstrap
      - generateB:
          requires:
            - bootstrap
      - list:
          requires:
            - generateA
            - generateB

  hourly-PM:
    triggers:
      - schedule:
          # LA working hours: 13.59-16.59 weekdays
          # cron: "59 20-23 * * 1-5"
          # UTC time
          cron: "59 12-16 * * 1-5"
          filters:
            branches:
              only:
                - master
    jobs:
      - bootstrap
      - generateA:
          requires:
            - bootstrap
      - generateB:
          requires:
            - bootstrap
      - list:
          requires:
            - generateA
            - generateB

  # daily:
  #   triggers:
  #     - schedule:
  #         # UTC time, matches 3AM weekdays LA time
  #         cron: "0 10 * * 1-5"
  #         filters:
  #           branches:
  #             only:
  #               - master
  #   jobs:
  #     - build
  generate-and-list:
    jobs:
      - test
      - bootstrap:
          filters:
            branches:
              only:
                - master
                - /.*mp$/
      - generateA:
          requires:
            - bootstrap
      # - generateB:
      #     requires:
      #       - bootstrap
      - list:
          requires:
            - generateA
            # - generateB
          filters:
            branches:
              only:
                - master